[project]
name = "matter-persistence"
description = "Matter persistance library."
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["async", "sql", "orm", "redis", "pydantic"]
authors = [
    { name = "RÃ´mulo Jales", email = "romulo@thisismatter.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "matter-exceptions~=2.0",
    "pydantic~=2.7.0",
    "sqlalchemy[asyncio]~=2.0.29",
    "redis>=5.0.3,<5.2.0",
    "sqlalchemy-utils~=0.41.2"
]
dynamic = ["version"]

[project.urls]
Documentation = "https://github.com/Matter-Tech/matter-persistence#readme"
Issues = "https://github.com/Matter-Tech/matter-persistence/issues"
Source = "https://github.com/Matter-Tech/matter-persistence"

[tool.hatch.version]
path = "matter_persistence/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "matter-persistence",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "mypy",
    "ruff",
    "pre-commit",
    "testcontainers",
    "asyncpg"
]
path = ".venv"  # having the venv in the same repo makes setting up pre-commit easier

[project.optional-dependencies]
examples = ["notebook"]

[tool.hatch.envs.default.scripts]
test = "pytest --cov-report=term-missing --cov-config=pyproject.toml -c=pyproject.toml --cov=matter_persistence {args}"
no-cov = "test --no-cov {args}"
typing = "mypy --install-types --non-interactive {args:matter_persistence tests}"
fmt = "ruff format {args:matter_persistence tests}"
lint = "ruff check --fix {args:matter_persistence tests}"

[tool.hatch.envs.test]
python="3.10"

[tool.hatch.envs.PY311]
python="3.11"

[tool.hatch.envs.PY312]
python="3.12"

[tool.hatch.envs.dockerized]
extra-dependencies = [
    "matter-persistence",
    "testcontainers"]

[tool.hatch.envs.dockerized.scripts]
test = "pytest -c=pyproject.toml {args}"

[[tool.hatch.envs.dockerized.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
target-version = "py312"
line-length = 120

[tool.ruff.lint]
extend-select = ["I", "Q", "UP"]
exclude =  ["tests"]

[tool.ruff.format]
line-ending = "lf"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "matter_persistence/__about__.py",
    "matter_persistence/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
filterwarnings = ["error", "ignore::ResourceWarning"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
