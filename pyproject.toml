[project]
name = "matter-persistence"
description = "Matter persistance library."
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["database", "orm", "migrations"]
authors = [
    { name = "RÃ´mulo Jales", email = "romulo@thisismatter.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
    "pydantic~=1.10",
    "matter-exceptions~=1.0"
]
dynamic = ["version"]

[project.scripts]
migrations = "matter_persistence.database.migrations.command:app"

[project.urls]
Documentation = "https://github.com/Matter-Tech/matter-persistence#readme"
Issues = "https://github.com/Matter-Tech/matter-persistence/issues"
Source = "https://github.com/Matter-Tech/matter-persistence"

[project.optional-dependencies]
database = ["sqlalchemy[asyncio]==2.0.20"]

database-migrations = ["matter-persistence[database]",
    "alembic==1.12.0",
    "python-dotenv~=1.0",
    "typer==0.9.0"]

database-postgresql = [
    "matter-persistence[database]",
    "sqlalchemy[postgresql]==2.0.16",
    "asyncpg==0.27.0"]

cache = ["aiocache==0.12.1"]

cache-memcached = [
    "matter-persistence[cache]",
    "aiocache[memcached]==0.12.1"]

[tool.hatch.version]
path = "matter_persistence/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "matter-persistence[database]",
    "matter-persistence[database-migrations]",
    "matter-persistence[cache]",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-mock",
    "black",
    "mypy",
    "ruff",
    "aiosqlite"
]

[tool.hatch.envs.default.scripts]
test = "pytest --cov-report=term-missing --cov-config=pyproject.toml -c=pyproject.toml --cov=matter_persistence {args}"
no-cov = "test --no-cov {args}"
typing = "mypy --install-types --non-interactive {args:matter_persistence tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
lint = [
    "style",
    #"typing",
]

[tool.hatch.envs.dockerized]
extra-dependencies = [
    "matter-persistence[database-postgresql]",
    "matter-persistence[cache-memcached]",
    "testcontainers"]

[tool.hatch.envs.dockerized.scripts]
test = "pytest -c=pyproject.toml tests/*/dockerized"

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
target-version = ["py310"]
line-length = 120

[tool.ruff]
target-version = "py310"
line-length = 120

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "matter_persistence/__about__.py",
    "matter_persistence/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
fail_under = 95

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-x --ignore-glob=tests/*/dockerized"
filterwarnings = ["error", "ignore::ResourceWarning"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
